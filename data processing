{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":71549,"databundleVersionId":8561470,"sourceType":"competition"}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport json\n\n\n# Load the CSV file\nfile_path = '/kaggle/input/rsna-2024-lumbar-spine-degenerative-classification/train_label_coordinates.csv'\ndf = pd.read_csv(file_path)\n\n# Define the required levels\nrequired_levels = ['L1/L2', 'L2/L3', 'L3/L4', 'L4/L5', 'L5/S1']\n\n# One-hot encode the 'condition' column\ncondition_dummies = pd.get_dummies(df['condition'])\n\n# Merge the one-hot encoded columns back into the original dataframe\ndf = pd.concat([df, condition_dummies], axis=1)\n\n# Group by 'series_id' and 'condition'\ngrouped = df.groupby(['series_id', 'condition'])\n\n# Initialize a list to hold the dictionaries\ndata_list = []\n\n# Iterate through each group and construct the dictionary\nfor (series_id, condition), group in grouped:\n    coordinates = []\n    for level in required_levels:\n        level_data = group[group['level'] == level]\n        if not level_data.empty:\n            x = level_data['x'].values[0]\n            y = level_data['y'].values[0]\n            z = level_data['instance_number'].values[0]\n        else:\n            x, y, z = np.nan, np.nan, np.nan\n        coordinates.append({\"level\": level, \"x\": x, \"y\": y, \"z\": z})\n    \n\n\n    data = {\n        \"series_id\": int(series_id),  # Convert to native Python int\n        \"condition\": condition,\n        \"coordinates\": [{\"level\": coord[\"level\"], \"x\": float(coord[\"x\"]) if isinstance(coord[\"x\"], np.float64) else coord[\"x\"], \"y\": float(coord[\"y\"]) if isinstance(coord[\"y\"], np.float64) else coord[\"y\"], \"z\": float(coord[\"z\"]) if isinstance(coord[\"z\"], np.int64) else coord[\"z\"]} for coord in coordinates]  # Convert numpy types\n    }\n    data_list.append(data)\n\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-18T21:58:37.633238Z","iopub.execute_input":"2024-06-18T21:58:37.634133Z","iopub.status.idle":"2024-06-18T21:59:01.677277Z","shell.execute_reply.started":"2024-06-18T21:58:37.634077Z","shell.execute_reply":"2024-06-18T21:59:01.676164Z"},"trusted":true},"execution_count":41,"outputs":[]},{"cell_type":"code","source":"\nfiltered_list = [item for item in data_list if item['series_id'] == 9334563]\n\n# If you expect only one result and want to retrieve the first match\nif filtered_list:\n    result = filtered_list[0]\n    print(result)\nelse:\n    print(\"No entry with series_id 9334563 found.\")","metadata":{"execution":{"iopub.status.busy":"2024-06-18T21:51:04.933323Z","iopub.execute_input":"2024-06-18T21:51:04.933688Z","iopub.status.idle":"2024-06-18T21:51:04.944239Z","shell.execute_reply.started":"2024-06-18T21:51:04.933658Z","shell.execute_reply":"2024-06-18T21:51:04.943072Z"},"trusted":true},"execution_count":35,"outputs":[{"name":"stdout","text":"{'series_id': 9334563, 'condition': 'Spinal Canal Stenosis', 'coordinates': [{'level': 'L1/L2', 'x': nan, 'y': nan, 'z': nan}, {'level': 'L2/L3', 'x': nan, 'y': nan, 'z': nan}, {'level': 'L3/L4', 'x': 415.7647593087013, 'y': 429.25688073394497, 'z': 8}, {'level': 'L4/L5', 'x': 435.0971323013306, 'y': 510.534375, 'z': 8}, {'level': 'L5/S1', 'x': 465.71588230133057, 'y': 573.103125, 'z': 8}]}\n","output_type":"stream"}]},{"cell_type":"code","source":"#Save the data list as JSON\noutput_path = '/kaggle/working/json_label_coordinates.json'\nwith open(output_path, 'w') as f:\n    json.dump(data_list, f, indent=4)\n\noutput_path","metadata":{"execution":{"iopub.status.busy":"2024-06-18T22:02:04.648988Z","iopub.execute_input":"2024-06-18T22:02:04.649882Z","iopub.status.idle":"2024-06-18T22:02:05.419119Z","shell.execute_reply.started":"2024-06-18T22:02:04.649839Z","shell.execute_reply":"2024-06-18T22:02:05.417972Z"},"trusted":true},"execution_count":43,"outputs":[{"execution_count":43,"output_type":"execute_result","data":{"text/plain":"'/kaggle/working/json_label_coordinates.json'"},"metadata":{}}]},{"cell_type":"code","source":"import os\nos.remove('/kaggle/working/data_with_condition_one_hot.json')\n","metadata":{"execution":{"iopub.status.busy":"2024-06-18T22:03:59.542031Z","iopub.execute_input":"2024-06-18T22:03:59.542440Z","iopub.status.idle":"2024-06-18T22:03:59.548666Z","shell.execute_reply.started":"2024-06-18T22:03:59.542407Z","shell.execute_reply":"2024-06-18T22:03:59.547532Z"},"trusted":true},"execution_count":46,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}