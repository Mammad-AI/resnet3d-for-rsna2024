{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "99c52140",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-06-21T18:01:56.041827Z",
     "iopub.status.busy": "2024-06-21T18:01:56.041442Z",
     "iopub.status.idle": "2024-06-21T18:02:09.521026Z",
     "shell.execute_reply": "2024-06-21T18:02:09.519720Z"
    },
    "papermill": {
     "duration": 13.486872,
     "end_time": "2024-06-21T18:02:09.523928",
     "exception": false,
     "start_time": "2024-06-21T18:01:56.037056",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting torchsummary\r\n",
      "  Downloading torchsummary-1.5.1-py3-none-any.whl.metadata (296 bytes)\r\n",
      "Downloading torchsummary-1.5.1-py3-none-any.whl (2.8 kB)\r\n",
      "Installing collected packages: torchsummary\r\n",
      "Successfully installed torchsummary-1.5.1\r\n"
     ]
    }
   ],
   "source": [
    "!pip install torchsummary\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e9d4912b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T18:02:09.532698Z",
     "iopub.status.busy": "2024-06-21T18:02:09.531597Z",
     "iopub.status.idle": "2024-06-21T18:02:14.853395Z",
     "shell.execute_reply": "2024-06-21T18:02:14.852353Z"
    },
    "papermill": {
     "duration": 5.328913,
     "end_time": "2024-06-21T18:02:14.856026",
     "exception": false,
     "start_time": "2024-06-21T18:02:09.527113",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torchvision.models as models\n",
    "from torchvision.models import resnet50\n",
    "from torchsummary import summary\n",
    "from skimage.transform import resize"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "66fa6a18",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T18:02:14.863859Z",
     "iopub.status.busy": "2024-06-21T18:02:14.863378Z",
     "iopub.status.idle": "2024-06-21T18:02:24.989190Z",
     "shell.execute_reply": "2024-06-21T18:02:24.988007Z"
    },
    "papermill": {
     "duration": 10.132913,
     "end_time": "2024-06-21T18:02:24.991964",
     "exception": false,
     "start_time": "2024-06-21T18:02:14.859051",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet50_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet50_Weights.DEFAULT` to get the most up-to-date weights.\n",
      "  warnings.warn(msg)\n",
      "Downloading: \"https://download.pytorch.org/models/resnet50-0676ba61.pth\" to /root/.cache/torch/hub/checkpoints/resnet50-0676ba61.pth\n",
      "100%|██████████| 97.8M/97.8M [00:00<00:00, 141MB/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "after conv1 torch.Size([1, 64, 13, 300, 300])\n",
      "after maxpool torch.Size([1, 64, 7, 150, 150])\n",
      "after layer1 torch.Size([1, 256, 7, 150, 150])\n",
      "after layer2 torch.Size([1, 512, 4, 75, 75])\n",
      "after layer3 torch.Size([1, 1024, 2, 38, 38])\n",
      "after layer4 torch.Size([1, 2048, 1, 19, 19])\n",
      "after flatten torch.Size([1, 2048])\n",
      "torch.Size([1, 40])\n"
     ]
    }
   ],
   "source": [
    "class ResNet3D(nn.Module):\n",
    "    def __init__(self, pretrained=True):\n",
    "        super(ResNet3D, self).__init__()\n",
    "        resnet2d = models.resnet50(pretrained=pretrained)\n",
    "        \n",
    "        self.conv1 = nn.Conv3d(1, 64, kernel_size=(7, 7, 7), stride=(2, 2, 2), padding=(3, 3, 3), bias=False)\n",
    "        self.bn1 = nn.BatchNorm3d(64)\n",
    "        self.relu = resnet2d.relu\n",
    "        self.maxpool = nn.MaxPool3d(kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))\n",
    "\n",
    "        # Copy weights from pretrained 2D model to 3D model\n",
    "        self.conv1.weight.data = resnet2d.conv1.weight.data.mean(dim=1, keepdim=True).unsqueeze(2).expand(-1, -1, 7, -1, -1)/7\n",
    "        self.layer1 = self._convert_2d_to_3d_layer(resnet2d.layer1)\n",
    "        self.layer2 = self._convert_2d_to_3d_layer(resnet2d.layer2)\n",
    "        self.layer3 = self._convert_2d_to_3d_layer(resnet2d.layer3)\n",
    "        self.layer4 = self._convert_2d_to_3d_layer(resnet2d.layer4)\n",
    "        \n",
    "        self.avgpool = nn.AdaptiveAvgPool3d((1, 1, 1))\n",
    "        self.fc = nn.Linear(2048, 40)  # Adjusted fully connected layer for 10*4 output\n",
    "\n",
    "    def _convert_2d_to_3d_layer(self, layer_2d):\n",
    "        layer_3d = nn.Sequential()\n",
    "        for idx, layer in enumerate(layer_2d):\n",
    "            for name, module in layer.named_children():\n",
    "                name=f\"{name}_{idx}\"\n",
    "                if isinstance(module, nn.Conv2d):\n",
    "                    layer_3d.add_module(name, nn.Conv3d(module.in_channels, module.out_channels,\n",
    "                                                        kernel_size=module.kernel_size[0],\n",
    "                                                        stride=module.stride[0],\n",
    "                                                        padding=module.padding[0],\n",
    "                                                        bias=module.bias))\n",
    "                    layer_3d[-1].weight.data = module.weight.data.unsqueeze(2).repeat(1,1,module.kernel_size[0],1,1)/module.kernel_size[0]\n",
    "                    \n",
    "                elif isinstance(module, nn.BatchNorm2d):\n",
    "                    layer_3d.add_module(name, nn.BatchNorm3d(module.num_features))\n",
    "                    layer_3d[-1].weight.data = module.weight.data\n",
    "                    layer_3d[-1].bias.data = module.bias.data\n",
    "                elif isinstance(module, nn.Sequential):\n",
    "                    sub_block = nn.Sequential()\n",
    "                    for sub_name, sub_module in module.named_children():\n",
    "                        if isinstance(sub_module, nn.Conv2d):\n",
    "                            sub_block.add_module(sub_name,nn.Conv3d(sub_module.in_channels, sub_module.out_channels,\n",
    "                                               kernel_size=(sub_module.kernel_size[0], sub_module.kernel_size[0], sub_module.kernel_size[0]),\n",
    "                                               stride=(sub_module.stride[0], sub_module.stride[0], sub_module.stride[0]),\n",
    "                                               padding=(sub_module.padding[0], sub_module.padding[0], sub_module.padding[0]),\n",
    "                                               bias=sub_module.bias))\n",
    "                            sub_block[-1].weight.data = sub_module.weight.data.unsqueeze(2).repeat(1, 1, sub_module.kernel_size[0], 1, 1) / sub_module.kernel_size[0]\n",
    "                        elif isinstance(sub_module,nn.BatchNorm2d):\n",
    "                            sub_block.add_module(name, nn.BatchNorm3d(sub_module.num_features))\n",
    "                            sub_block[-1].weight.data = sub_module.weight.data\n",
    "                            sub_block[-1].bias.data = sub_module.bias.data\n",
    "                    layer_3d.add_module(name,sub_block)\n",
    "                        \n",
    "                else:\n",
    "                    layer_3d.add_module(name, module)\n",
    "        #print(layer_3d)\n",
    "        return layer_3d\n",
    "    \n",
    "    def forward(self, x):\n",
    "        x = self.conv1(x)\n",
    "        print('after conv1',x.shape)\n",
    "        x = self.bn1(x)\n",
    "        x = self.relu(x)\n",
    "        x = self.maxpool(x)\n",
    "        skip_1=x\n",
    "        print('after maxpool',x.shape)\n",
    "\n",
    "        x = self.layer1[0:7](x)\n",
    "        skip_1=self.layer1[7][0](skip_1)\n",
    "        x=x+skip_1\n",
    "        x=self.layer1[7][1](x)\n",
    "        x=self.layer1[8:-1](x)\n",
    "        print('after layer1',x.shape)\n",
    "        skip_2=x\n",
    "        #print(self.layer2)\n",
    "        x = self.layer2[0:7](x)\n",
    "        skip_2=self.layer2[7][0](skip_1)\n",
    "        x=skip_2+x\n",
    "        x=self.layer2[7][1](x)\n",
    "        x=self.layer2[8:-1](x)\n",
    "\n",
    "        print('after layer2',x.shape)\n",
    "        skip_3=x\n",
    "        \n",
    "        x = self.layer3[0:7](x)\n",
    "        skip_3=self.layer3[7][0](skip_3)\n",
    "        x=skip_3+x\n",
    "        x=self.layer3[7][1](x)\n",
    "        x=self.layer3[8:-1](x)\n",
    "        \n",
    "        print('after layer3',x.shape)\n",
    "        skip_4=x\n",
    "        x = self.layer4[0:7](x)\n",
    "        skip_4=self.layer4[7][0](skip_4)\n",
    "        x=skip_4+x\n",
    "        x=self.layer4[7][1](x)\n",
    "        x=self.layer4[8:-1](x)        \n",
    "        print('after layer4',x.shape)\n",
    "\n",
    "\n",
    "        x = self.avgpool(x)\n",
    "        x = torch.flatten(x, 1)\n",
    "        print('after flatten',x.shape)\n",
    "        x = self.fc(x)\n",
    "\n",
    "        return x\n",
    "\n",
    "# Example usage\n",
    "model = ResNet3D(pretrained=True)\n",
    "input_tensor = torch.randn(1, 1, 25, 600, 600)  # Batch size of 1, single channel, depth 25, height 600, width 600\n",
    "output = model(input_tensor)\n",
    "print(output.shape)  # Should be [1, 1000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fa20e9b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T18:02:25.002494Z",
     "iopub.status.busy": "2024-06-21T18:02:25.001933Z",
     "iopub.status.idle": "2024-06-21T18:02:25.010788Z",
     "shell.execute_reply": "2024-06-21T18:02:25.009872Z"
    },
    "papermill": {
     "duration": 0.016688,
     "end_time": "2024-06-21T18:02:25.013129",
     "exception": false,
     "start_time": "2024-06-21T18:02:24.996441",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "with open('resnet_3d.py', 'w') as f:\n",
    "    f.write(\"\"\"\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torchvision.models as models\n",
    "from torchvision.models import resnet50\n",
    "from skimage.transform import resize\n",
    "class ResNet3D(nn.Module):\n",
    "    def __init__(self, pretrained=True):\n",
    "        super(ResNet3D, self).__init__()\n",
    "        resnet2d = models.resnet50(pretrained=pretrained)\n",
    "        \n",
    "        self.conv1 = nn.Conv3d(1, 64, kernel_size=(7, 7, 7), stride=(2, 2, 2), padding=(3, 3, 3), bias=False)\n",
    "        self.bn1 = nn.BatchNorm3d(64)\n",
    "        self.relu = resnet2d.relu\n",
    "        self.maxpool = nn.MaxPool3d(kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))\n",
    "\n",
    "        # Copy weights from pretrained 2D model to 3D model\n",
    "        self.conv1.weight.data = resnet2d.conv1.weight.data.mean(dim=1, keepdim=True).unsqueeze(2).expand(-1, -1, 7, -1, -1)/7\n",
    "        self.layer1 = self._convert_2d_to_3d_layer(resnet2d.layer1)\n",
    "        self.layer2 = self._convert_2d_to_3d_layer(resnet2d.layer2)\n",
    "        self.layer3 = self._convert_2d_to_3d_layer(resnet2d.layer3)\n",
    "        self.layer4 = self._convert_2d_to_3d_layer(resnet2d.layer4)\n",
    "        \n",
    "        self.avgpool = nn.AdaptiveAvgPool3d((1, 1, 1))\n",
    "        self.fc = nn.Linear(2048, 40)  # Adjusted fully connected layer for 10*4 output\n",
    "\n",
    "    def _convert_2d_to_3d_layer(self, layer_2d):\n",
    "        layer_3d = nn.Sequential()\n",
    "        for idx, layer in enumerate(layer_2d):\n",
    "            for name, module in layer.named_children():\n",
    "                name=f\"{name}_{idx}\"\n",
    "                if isinstance(module, nn.Conv2d):\n",
    "                    layer_3d.add_module(name, nn.Conv3d(module.in_channels, module.out_channels,\n",
    "                                                        kernel_size=module.kernel_size[0],\n",
    "                                                        stride=module.stride[0],\n",
    "                                                        padding=module.padding[0],\n",
    "                                                        bias=module.bias))\n",
    "                    layer_3d[-1].weight.data = module.weight.data.unsqueeze(2).repeat(1,1,module.kernel_size[0],1,1)/module.kernel_size[0]\n",
    "                    \n",
    "                elif isinstance(module, nn.BatchNorm2d):\n",
    "                    layer_3d.add_module(name, nn.BatchNorm3d(module.num_features))\n",
    "                    layer_3d[-1].weight.data = module.weight.data\n",
    "                    layer_3d[-1].bias.data = module.bias.data\n",
    "                elif isinstance(module, nn.Sequential):\n",
    "                    sub_block = nn.Sequential()\n",
    "                    for sub_name, sub_module in module.named_children():\n",
    "                        if isinstance(sub_module, nn.Conv2d):\n",
    "                            sub_block.add_module(sub_name,nn.Conv3d(sub_module.in_channels, sub_module.out_channels,\n",
    "                                               kernel_size=(sub_module.kernel_size[0], sub_module.kernel_size[0], sub_module.kernel_size[0]),\n",
    "                                               stride=(sub_module.stride[0], sub_module.stride[0], sub_module.stride[0]),\n",
    "                                               padding=(sub_module.padding[0], sub_module.padding[0], sub_module.padding[0]),\n",
    "                                               bias=sub_module.bias))\n",
    "                            sub_block[-1].weight.data = sub_module.weight.data.unsqueeze(2).repeat(1, 1, sub_module.kernel_size[0], 1, 1) / sub_module.kernel_size[0]\n",
    "                        elif isinstance(sub_module,nn.BatchNorm2d):\n",
    "                            sub_block.add_module(name, nn.BatchNorm3d(sub_module.num_features))\n",
    "                            sub_block[-1].weight.data = sub_module.weight.data\n",
    "                            sub_block[-1].bias.data = sub_module.bias.data\n",
    "                    layer_3d.add_module(name,sub_block)\n",
    "                        \n",
    "                else:\n",
    "                    layer_3d.add_module(name, module)\n",
    "        #print(layer_3d)\n",
    "        return layer_3d\n",
    "    \n",
    "    def forward(self, x):\n",
    "        x = self.conv1(x)\n",
    "        print('after conv1',x.shape)\n",
    "        x = self.bn1(x)\n",
    "        x = self.relu(x)\n",
    "        x = self.maxpool(x)\n",
    "        skip_1=x\n",
    "        print('after maxpool',x.shape)\n",
    "\n",
    "        x = self.layer1[0:7](x)\n",
    "        skip_1=self.layer1[7][0](skip_1)\n",
    "        x=x+skip_1\n",
    "        x=self.layer1[7][1](x)\n",
    "        x=self.layer1[8:-1](x)\n",
    "        print('after layer1',x.shape)\n",
    "        skip_2=x\n",
    "        #print(self.layer2)\n",
    "        x = self.layer2[0:7](x)\n",
    "        skip_2=self.layer2[7][0](skip_1)\n",
    "        x=skip_2+x\n",
    "        x=self.layer2[7][1](x)\n",
    "        x=self.layer2[8:-1](x)\n",
    "\n",
    "        print('after layer2',x.shape)\n",
    "        skip_3=x\n",
    "        \n",
    "        x = self.layer3[0:7](x)\n",
    "        skip_3=self.layer3[7][0](skip_3)\n",
    "        x=skip_3+x\n",
    "        x=self.layer3[7][1](x)\n",
    "        x=self.layer3[8:-1](x)\n",
    "        \n",
    "        print('after layer3',x.shape)\n",
    "        skip_4=x\n",
    "        x = self.layer4[0:7](x)\n",
    "        skip_4=self.layer4[7][0](skip_4)\n",
    "        x=skip_4+x\n",
    "        x=self.layer4[7][1](x)\n",
    "        x=self.layer4[8:-1](x)        \n",
    "        print('after layer4',x.shape)\n",
    "\n",
    "\n",
    "        x = self.avgpool(x)\n",
    "        x = torch.flatten(x, 1)\n",
    "        print('after flatten',x.shape)\n",
    "        x = self.fc(x)\n",
    "\n",
    "        return x\n",
    "\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4f86321b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-21T18:02:25.022746Z",
     "iopub.status.busy": "2024-06-21T18:02:25.022367Z",
     "iopub.status.idle": "2024-06-21T18:02:40.050569Z",
     "shell.execute_reply": "2024-06-21T18:02:40.049350Z"
    },
    "papermill": {
     "duration": 15.036239,
     "end_time": "2024-06-21T18:02:40.053497",
     "exception": false,
     "start_time": "2024-06-21T18:02:25.017258",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "after conv1 torch.Size([2, 64, 13, 300, 300])\n",
      "after maxpool torch.Size([2, 64, 7, 150, 150])\n",
      "after layer1 torch.Size([2, 256, 7, 150, 150])\n",
      "after layer2 torch.Size([2, 512, 4, 75, 75])\n",
      "after layer3 torch.Size([2, 1024, 2, 38, 38])\n",
      "after layer4 torch.Size([2, 2048, 1, 19, 19])\n",
      "after flatten torch.Size([2, 2048])\n",
      "----------------------------------------------------------------\n",
      "        Layer (type)               Output Shape         Param #\n",
      "================================================================\n",
      "            Conv3d-1     [-1, 64, 13, 300, 300]          21,952\n",
      "       BatchNorm3d-2     [-1, 64, 13, 300, 300]             128\n",
      "              ReLU-3     [-1, 64, 13, 300, 300]               0\n",
      "         MaxPool3d-4      [-1, 64, 7, 150, 150]               0\n",
      "            Conv3d-5      [-1, 64, 7, 150, 150]           4,096\n",
      "       BatchNorm3d-6      [-1, 64, 7, 150, 150]             128\n",
      "            Conv3d-7      [-1, 64, 7, 150, 150]         110,592\n",
      "       BatchNorm3d-8      [-1, 64, 7, 150, 150]             128\n",
      "            Conv3d-9     [-1, 256, 7, 150, 150]          16,384\n",
      "      BatchNorm3d-10     [-1, 256, 7, 150, 150]             512\n",
      "             ReLU-11     [-1, 256, 7, 150, 150]               0\n",
      "           Conv3d-12     [-1, 256, 7, 150, 150]          16,384\n",
      "      BatchNorm3d-13     [-1, 256, 7, 150, 150]             512\n",
      "           Conv3d-14      [-1, 64, 7, 150, 150]          16,384\n",
      "      BatchNorm3d-15      [-1, 64, 7, 150, 150]             128\n",
      "           Conv3d-16      [-1, 64, 7, 150, 150]         110,592\n",
      "      BatchNorm3d-17      [-1, 64, 7, 150, 150]             128\n",
      "           Conv3d-18     [-1, 256, 7, 150, 150]          16,384\n",
      "      BatchNorm3d-19     [-1, 256, 7, 150, 150]             512\n",
      "             ReLU-20     [-1, 256, 7, 150, 150]               0\n",
      "           Conv3d-21      [-1, 64, 7, 150, 150]          16,384\n",
      "      BatchNorm3d-22      [-1, 64, 7, 150, 150]             128\n",
      "           Conv3d-23      [-1, 64, 7, 150, 150]         110,592\n",
      "      BatchNorm3d-24      [-1, 64, 7, 150, 150]             128\n",
      "           Conv3d-25     [-1, 256, 7, 150, 150]          16,384\n",
      "      BatchNorm3d-26     [-1, 256, 7, 150, 150]             512\n",
      "           Conv3d-27     [-1, 128, 7, 150, 150]          32,768\n",
      "      BatchNorm3d-28     [-1, 128, 7, 150, 150]             256\n",
      "           Conv3d-29       [-1, 128, 4, 75, 75]         442,368\n",
      "      BatchNorm3d-30       [-1, 128, 4, 75, 75]             256\n",
      "           Conv3d-31       [-1, 512, 4, 75, 75]          65,536\n",
      "      BatchNorm3d-32       [-1, 512, 4, 75, 75]           1,024\n",
      "             ReLU-33       [-1, 512, 4, 75, 75]               0\n",
      "           Conv3d-34       [-1, 512, 4, 75, 75]         131,072\n",
      "      BatchNorm3d-35       [-1, 512, 4, 75, 75]           1,024\n",
      "           Conv3d-36       [-1, 128, 4, 75, 75]          65,536\n",
      "      BatchNorm3d-37       [-1, 128, 4, 75, 75]             256\n",
      "           Conv3d-38       [-1, 128, 4, 75, 75]         442,368\n",
      "      BatchNorm3d-39       [-1, 128, 4, 75, 75]             256\n",
      "           Conv3d-40       [-1, 512, 4, 75, 75]          65,536\n",
      "      BatchNorm3d-41       [-1, 512, 4, 75, 75]           1,024\n",
      "             ReLU-42       [-1, 512, 4, 75, 75]               0\n",
      "           Conv3d-43       [-1, 128, 4, 75, 75]          65,536\n",
      "      BatchNorm3d-44       [-1, 128, 4, 75, 75]             256\n",
      "           Conv3d-45       [-1, 128, 4, 75, 75]         442,368\n",
      "      BatchNorm3d-46       [-1, 128, 4, 75, 75]             256\n",
      "           Conv3d-47       [-1, 512, 4, 75, 75]          65,536\n",
      "      BatchNorm3d-48       [-1, 512, 4, 75, 75]           1,024\n",
      "             ReLU-49       [-1, 512, 4, 75, 75]               0\n",
      "           Conv3d-50       [-1, 128, 4, 75, 75]          65,536\n",
      "      BatchNorm3d-51       [-1, 128, 4, 75, 75]             256\n",
      "           Conv3d-52       [-1, 128, 4, 75, 75]         442,368\n",
      "      BatchNorm3d-53       [-1, 128, 4, 75, 75]             256\n",
      "           Conv3d-54       [-1, 512, 4, 75, 75]          65,536\n",
      "      BatchNorm3d-55       [-1, 512, 4, 75, 75]           1,024\n",
      "           Conv3d-56       [-1, 256, 4, 75, 75]         131,072\n",
      "      BatchNorm3d-57       [-1, 256, 4, 75, 75]             512\n",
      "           Conv3d-58       [-1, 256, 2, 38, 38]       1,769,472\n",
      "      BatchNorm3d-59       [-1, 256, 2, 38, 38]             512\n",
      "           Conv3d-60      [-1, 1024, 2, 38, 38]         262,144\n",
      "      BatchNorm3d-61      [-1, 1024, 2, 38, 38]           2,048\n",
      "             ReLU-62      [-1, 1024, 2, 38, 38]               0\n",
      "           Conv3d-63      [-1, 1024, 2, 38, 38]         524,288\n",
      "      BatchNorm3d-64      [-1, 1024, 2, 38, 38]           2,048\n",
      "           Conv3d-65       [-1, 256, 2, 38, 38]         262,144\n",
      "      BatchNorm3d-66       [-1, 256, 2, 38, 38]             512\n",
      "           Conv3d-67       [-1, 256, 2, 38, 38]       1,769,472\n",
      "      BatchNorm3d-68       [-1, 256, 2, 38, 38]             512\n",
      "           Conv3d-69      [-1, 1024, 2, 38, 38]         262,144\n",
      "      BatchNorm3d-70      [-1, 1024, 2, 38, 38]           2,048\n",
      "             ReLU-71      [-1, 1024, 2, 38, 38]               0\n",
      "           Conv3d-72       [-1, 256, 2, 38, 38]         262,144\n",
      "      BatchNorm3d-73       [-1, 256, 2, 38, 38]             512\n",
      "           Conv3d-74       [-1, 256, 2, 38, 38]       1,769,472\n",
      "      BatchNorm3d-75       [-1, 256, 2, 38, 38]             512\n",
      "           Conv3d-76      [-1, 1024, 2, 38, 38]         262,144\n",
      "      BatchNorm3d-77      [-1, 1024, 2, 38, 38]           2,048\n",
      "             ReLU-78      [-1, 1024, 2, 38, 38]               0\n",
      "           Conv3d-79       [-1, 256, 2, 38, 38]         262,144\n",
      "      BatchNorm3d-80       [-1, 256, 2, 38, 38]             512\n",
      "           Conv3d-81       [-1, 256, 2, 38, 38]       1,769,472\n",
      "      BatchNorm3d-82       [-1, 256, 2, 38, 38]             512\n",
      "           Conv3d-83      [-1, 1024, 2, 38, 38]         262,144\n",
      "      BatchNorm3d-84      [-1, 1024, 2, 38, 38]           2,048\n",
      "             ReLU-85      [-1, 1024, 2, 38, 38]               0\n",
      "           Conv3d-86       [-1, 256, 2, 38, 38]         262,144\n",
      "      BatchNorm3d-87       [-1, 256, 2, 38, 38]             512\n",
      "           Conv3d-88       [-1, 256, 2, 38, 38]       1,769,472\n",
      "      BatchNorm3d-89       [-1, 256, 2, 38, 38]             512\n",
      "           Conv3d-90      [-1, 1024, 2, 38, 38]         262,144\n",
      "      BatchNorm3d-91      [-1, 1024, 2, 38, 38]           2,048\n",
      "             ReLU-92      [-1, 1024, 2, 38, 38]               0\n",
      "           Conv3d-93       [-1, 256, 2, 38, 38]         262,144\n",
      "      BatchNorm3d-94       [-1, 256, 2, 38, 38]             512\n",
      "           Conv3d-95       [-1, 256, 2, 38, 38]       1,769,472\n",
      "      BatchNorm3d-96       [-1, 256, 2, 38, 38]             512\n",
      "           Conv3d-97      [-1, 1024, 2, 38, 38]         262,144\n",
      "      BatchNorm3d-98      [-1, 1024, 2, 38, 38]           2,048\n",
      "           Conv3d-99       [-1, 512, 2, 38, 38]         524,288\n",
      "     BatchNorm3d-100       [-1, 512, 2, 38, 38]           1,024\n",
      "          Conv3d-101       [-1, 512, 1, 19, 19]       7,077,888\n",
      "     BatchNorm3d-102       [-1, 512, 1, 19, 19]           1,024\n",
      "          Conv3d-103      [-1, 2048, 1, 19, 19]       1,048,576\n",
      "     BatchNorm3d-104      [-1, 2048, 1, 19, 19]           4,096\n",
      "            ReLU-105      [-1, 2048, 1, 19, 19]               0\n",
      "          Conv3d-106      [-1, 2048, 1, 19, 19]       2,097,152\n",
      "     BatchNorm3d-107      [-1, 2048, 1, 19, 19]           4,096\n",
      "          Conv3d-108       [-1, 512, 1, 19, 19]       1,048,576\n",
      "     BatchNorm3d-109       [-1, 512, 1, 19, 19]           1,024\n",
      "          Conv3d-110       [-1, 512, 1, 19, 19]       7,077,888\n",
      "     BatchNorm3d-111       [-1, 512, 1, 19, 19]           1,024\n",
      "          Conv3d-112      [-1, 2048, 1, 19, 19]       1,048,576\n",
      "     BatchNorm3d-113      [-1, 2048, 1, 19, 19]           4,096\n",
      "            ReLU-114      [-1, 2048, 1, 19, 19]               0\n",
      "          Conv3d-115       [-1, 512, 1, 19, 19]       1,048,576\n",
      "     BatchNorm3d-116       [-1, 512, 1, 19, 19]           1,024\n",
      "          Conv3d-117       [-1, 512, 1, 19, 19]       7,077,888\n",
      "     BatchNorm3d-118       [-1, 512, 1, 19, 19]           1,024\n",
      "          Conv3d-119      [-1, 2048, 1, 19, 19]       1,048,576\n",
      "     BatchNorm3d-120      [-1, 2048, 1, 19, 19]           4,096\n",
      "AdaptiveAvgPool3d-121        [-1, 2048, 1, 1, 1]               0\n",
      "          Linear-122                   [-1, 40]          81,960\n",
      "================================================================\n",
      "Total params: 46,237,032\n",
      "Trainable params: 46,237,032\n",
      "Non-trainable params: 0\n",
      "----------------------------------------------------------------\n",
      "Input size (MB): 34.33\n",
      "Forward/backward pass size (MB): 8281.37\n",
      "Params size (MB): 176.38\n",
      "Estimated Total Size (MB): 8492.08\n",
      "----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "input_tensor_size = (1, 25, 600, 600)  # Channels, Depth, Height, Width\n",
    "summary(model, input_tensor_size)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 48.025545,
   "end_time": "2024-06-21T18:02:41.380930",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-21T18:01:53.355385",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
